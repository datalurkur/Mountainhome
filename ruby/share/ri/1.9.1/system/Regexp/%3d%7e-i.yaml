--- !ruby/object:RDoc::RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Match---Matches <em>rxp</em> against <em>str</em>.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "   /at/ =~ &quot;input data&quot;   #=&gt; 7\n   /ax/ =~ &quot;input data&quot;   #=&gt; nil\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: If <tt>=~</tt> is used with a regexp literal with named captures, captured strings (or nil) is assigned to local variables named by the capture names.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "   /(?&lt;lhs&gt;\\w+)\\s*=\\s*(?&lt;rhs&gt;\\w+)/ =~ &quot;  x = y  &quot;\n   p lhs    #=&gt; &quot;x&quot;\n   p rhs    #=&gt; &quot;y&quot;\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: If it is not matched, nil is assigned for the variables.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "   /(?&lt;lhs&gt;\\w+)\\s*=\\s*(?&lt;rhs&gt;\\w+)/ =~ &quot;  x = &quot;\n   p lhs    #=&gt; nil\n   p rhs    #=&gt; nil\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: This assignment is implemented in the Ruby parser. The parser detects 'regexp-literal =~ expression' for the assignment. The regexp must be a literal without interpolation and placed at left hand side.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The assignment is not occur if the regexp is not a literal.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "   re = /(?&lt;lhs&gt;\\w+)\\s*=\\s*(?&lt;rhs&gt;\\w+)/\n   re =~ &quot;  x = y  &quot;\n   p lhs    # undefined local variable\n   p rhs    # undefined local variable\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: A regexp interpolation, <tt>#{}</tt>, also disables the assignment.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "   rhs_pat = /(?&lt;rhs&gt;\\w+)/\n   /(?&lt;lhs&gt;\\w+)\\s*=\\s*#{rhs_pat}/ =~ &quot;x = y&quot;\n   p lhs    # undefined local variable\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The assignment is not occur if the regexp is placed at right hand side.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  &quot;  x = y  &quot; =~ /(?&lt;lhs&gt;\\w+)\\s*=\\s*(?&lt;rhs&gt;\\w+)/\n  p lhs, rhs # undefined local variable\n"
full_name: Regexp#=~
is_singleton: false
name: =~
params: |
  rxp =~ str    => integer or nil

visibility: public
