--- !ruby/object:RDoc::RI::ModuleDescription 
attributes: []

class_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: add_builtin_type
- !ruby/object:RDoc::RI::MethodSummary 
  name: add_domain_type
- !ruby/object:RDoc::RI::MethodSummary 
  name: add_private_type
- !ruby/object:RDoc::RI::MethodSummary 
  name: add_ruby_type
- !ruby/object:RDoc::RI::MethodSummary 
  name: detect_implicit
- !ruby/object:RDoc::RI::MethodSummary 
  name: dump
- !ruby/object:RDoc::RI::MethodSummary 
  name: dump_stream
- !ruby/object:RDoc::RI::MethodSummary 
  name: each_document
- !ruby/object:RDoc::RI::MethodSummary 
  name: each_node
- !ruby/object:RDoc::RI::MethodSummary 
  name: emitter
- !ruby/object:RDoc::RI::MethodSummary 
  name: escape
- !ruby/object:RDoc::RI::MethodSummary 
  name: generic_parser
- !ruby/object:RDoc::RI::MethodSummary 
  name: load
- !ruby/object:RDoc::RI::MethodSummary 
  name: load_documents
- !ruby/object:RDoc::RI::MethodSummary 
  name: load_file
- !ruby/object:RDoc::RI::MethodSummary 
  name: load_stream
- !ruby/object:RDoc::RI::MethodSummary 
  name: make_stream
- !ruby/object:RDoc::RI::MethodSummary 
  name: object_maker
- !ruby/object:RDoc::RI::MethodSummary 
  name: parse
- !ruby/object:RDoc::RI::MethodSummary 
  name: parse_documents
- !ruby/object:RDoc::RI::MethodSummary 
  name: parse_file
- !ruby/object:RDoc::RI::MethodSummary 
  name: parser
- !ruby/object:RDoc::RI::MethodSummary 
  name: quick_emit
- !ruby/object:RDoc::RI::MethodSummary 
  name: read_type_class
- !ruby/object:RDoc::RI::MethodSummary 
  name: resolver
- !ruby/object:RDoc::RI::MethodSummary 
  name: tag_class
- !ruby/object:RDoc::RI::MethodSummary 
  name: tagged_classes
- !ruby/object:RDoc::RI::MethodSummary 
  name: tagurize
- !ruby/object:RDoc::RI::MethodSummary 
  name: transfer
- !ruby/object:RDoc::RI::MethodSummary 
  name: try_implicit
- !ruby/object:RDoc::RI::MethodSummary 
  name: unescape
comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Constants used throughout the library
- !ruby/struct:RDoc::Markup::Flow::RULE 
  :width: 1
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: YAML + DBM = YDBM
- !ruby/object:RDoc::Markup::Flow::LIST 
  contents: 
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "-"
    :body: Same interface as DBM class
  type: :BULLET
- !ruby/struct:RDoc::Markup::Flow::RULE 
  :width: 1
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Handle Unicode-to-Internal conversion
- !ruby/struct:RDoc::Markup::Flow::RULE 
  :width: 1
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Error messages and exception class
- !ruby/struct:RDoc::Markup::Flow::RULE 
  :width: 1
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: YAML::Loader class .. type handling ..
- !ruby/struct:RDoc::Markup::Flow::RULE 
  :width: 1
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "$Id: tag.rb 11708 2007-02-12 23:01:19Z shyouhei $"
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 1
  :text: "yaml/tag.rb: methods for associating a taguri to a class."
- !ruby/object:RDoc::Markup::Flow::LIST 
  contents: 
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "Author:"
    :body: why the lucky stiff
  type: :NOTE
- !ruby/struct:RDoc::Markup::Flow::RULE 
  :width: 1
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Classes required by the full core typeset
- !ruby/struct:RDoc::Markup::Flow::RULE 
  :width: 1
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: YAML::YPath
- !ruby/struct:RDoc::Markup::Flow::RULE 
  :width: 1
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 2
  :text: YAML
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: YAML(tm) (rhymes with 'camel') is a straightforward machine parsable data serialization format designed for human readability and interaction with scripting languages such as Perl and Python. YAML is optimized for data serialization, formatted dumping, configuration files, log files, Internet messaging and filtering. This specification describes the YAML information model and serialization format. Together with the Unicode standard for characters, it provides all the information necessary to understand YAML Version 1.0 and construct computer programs to process it.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: See http://yaml.org/ for more information. For a quick tutorial, please visit YAML In Five Minutes (http://yaml.kwiki.org/?YamlInFiveMinutes).
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 2
  :text: About This Library
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The YAML 1.0 specification outlines four stages of YAML loading and dumping. This library honors all four of those stages, although data is really only available to you in three stages.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "The four stages are: native, representation, serialization, and presentation."
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The native stage refers to data which has been loaded completely into Ruby's own types. (See +YAML::load+.)
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The representation stage means data which has been composed into +YAML::BaseNode+ objects. In this stage, the document is available as a tree of node objects. You can perform YPath queries and transformations at this level. (See +YAML::parse+.)
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The serialization stage happens inside the parser. The YAML parser used in Ruby is called Syck. Serialized nodes are available in the extension as SyckNode structs.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The presentation stage is the YAML document itself. This is accessible to you as a string. (See +YAML::dump+.)
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: For more information about the various information models, see Chapter 3 of the YAML 1.0 Specification (http://yaml.org/spec/#id2491269).
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The YAML module provides quick access to the most common loading (YAML::load) and dumping (YAML::dump) tasks. This module also provides an API for registering global types (YAML::add_domain_type).
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 2
  :text: Example
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: A simple round-trip (load and dump) of an object.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "    require &quot;yaml&quot;\n\n    test_obj = [&quot;dogs&quot;, &quot;cats&quot;, &quot;badgers&quot;]\n\n    yaml_obj = YAML::dump( test_obj )\n                        # -&gt; ---\n                             - dogs\n                             - cats\n                             - badgers\n    ruby_obj = YAML::load( yaml_obj )\n                        # =&gt; [&quot;dogs&quot;, &quot;cats&quot;, &quot;badgers&quot;]\n    ruby_obj == test_obj\n                        # =&gt; true\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: To register your custom types with the global resolver, use <tt>add_domain_type</tt>.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "    YAML::add_domain_type( &quot;your-site.com,2004&quot;, &quot;widget&quot; ) do |type, val|\n        Widget.new( val )\n    end\n"
constants: 
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: Constants
  name: VERSION
  value: "'0.60'"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: SUPPORTED_YAML_VERSIONS
  value: "['1.0']"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: Parser tokens
  name: WORD_CHAR
  value: "'A-Za-z0-9'"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: PRINTABLE_CHAR
  value: "'-_A-Za-z0-9!?/()$\\'\". '"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: NOT_PLAIN_CHAR
  value: "'\\x7f\\x0-\\x1f\\x80-\\x9f'"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: ESCAPE_CHAR
  value: "'[\\\\x00-\\\\x09\\\\x0b-\\\\x1f]'"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: INDICATOR_CHAR
  value: "'*&!|\\\\\\\\^@%{}[]='"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: SPACE_INDICATORS
  value: "'-#:,?'"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: RESTRICTED_INDICATORS
  value: "'#:,}]'"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: DNS_COMP_RE
  value: "\"\\\\w(?:[-\\\\w]*\\\\w)?\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: DNS_NAME_RE
  value: "\"(?:(?:#{DNS_COMP_RE}\\\\.)+#{DNS_COMP_RE}|#{DNS_COMP_RE})\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: ESCAPES
  value: "%w{\\x00   \\x01       \\x02  \\x03     \\x04        \\x05   \\x06      \\a                              \\x08    \\t         \\n             \\v         \\f             \\r         \\x0e   \\x0f                                  \\x10       \\x11  \\x12     \\x13        \\x14   \\x15      \\x16 \\x17                                  \\x18       \\x19  \\x1a     \\e          \\x1c    \\x1d       \\x1e  \\x1f                             }"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: UNESCAPES
  value: "{                                 'a' => \"\\x07\", 'b' => \"\\x08\", 't' => \"\\x09\",                                  'n' => \"\\x0a\", 'v' => \"\\x0b\", 'f' => \"\\x0c\",                                 'r' => \"\\x0d\", 'e' => \"\\x1b\", '\\\\' => '\\\\',                             }"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: Default settings
  name: DEFAULTS
  value: "{                 :Indent => 2, :UseHeader => false, :UseVersion => false, :Version => '1.0',                 :SortKeys => false, :AnchorFormat => 'id%03d', :ExplicitTypes => false,                 :WidthType => 'absolute', :BestWidth => 80,                 :UseBlock => false, :UseFold => false, :Encoding => :None         }"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: Error messages
  name: ERROR_NO_HEADER_NODE
  value: "\"With UseHeader=false, the node Array or Hash must have elements\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: ERROR_NEED_HEADER
  value: "\"With UseHeader=false, the node must be an Array or Hash\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: ERROR_BAD_EXPLICIT
  value: "\"Unsupported explicit transfer: '%s'\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: ERROR_MANY_EXPLICIT
  value: "\"More than one explicit transfer\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: ERROR_MANY_IMPLICIT
  value: "\"More than one implicit request\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: ERROR_NO_ANCHOR
  value: "\"No anchor for alias '%s'\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: ERROR_BAD_ANCHOR
  value: "\"Invalid anchor: %s\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: ERROR_MANY_ANCHOR
  value: "\"More than one anchor\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: ERROR_ANCHOR_ALIAS
  value: "\"Can't define both an anchor and an alias\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: ERROR_BAD_ALIAS
  value: "\"Invalid alias: %s\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: ERROR_MANY_ALIAS
  value: "\"More than one alias\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: ERROR_ZERO_INDENT
  value: "\"Can't use zero as an indentation width\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: ERROR_UNSUPPORTED_VERSION
  value: "\"This release of YAML.rb does not support YAML version %s\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: ERROR_UNSUPPORTED_ENCODING
  value: "\"Attempt to use unsupported encoding: %s\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: Resolver
  value: YAML::Syck::Resolver
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: DefaultResolver
  value: YAML::Syck::DefaultResolver
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: GenericResolver
  value: YAML::Syck::GenericResolver
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: Parser
  value: YAML::Syck::Parser
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: Emitter
  value: YAML::Syck::Emitter
full_name: YAML
includes: []

instance_methods: []

name: YAML
