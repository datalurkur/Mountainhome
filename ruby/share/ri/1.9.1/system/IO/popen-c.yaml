--- !ruby/object:RDoc::RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Runs the specified command as a subprocess; the subprocess's standard input and output will be connected to the returned <tt>IO</tt> object. If <em>cmd</em> is a <tt>String</tt> ``<tt>-</tt>'', then a new instance of Ruby is started as the subprocess. If <em>cmd</em> is an <tt>Array</tt> of <tt>String</tt>, then it will be used as the subprocess's <tt>argv</tt> bypassing a shell. The array can contains a hash at first for environments and a hash at last for options similar to <tt>spawn</tt>. The default mode for the new file object is ``r'', but <em>mode</em> may be set to any of the modes listed in the description for class IO. The last argument <em>opt</em> qualifies <em>mode</em>.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  # set IO encoding\n  nkf_io = IO.popen(&quot;nkf -e filename&quot;, :external_encoding=&gt;&quot;EUC-JP&quot;)\n  euc_jp_string = nkf_io.read\n\n  # discard standard error using spawn option.\n  # See the document of Kernel.spawn.\n  ls_io = IO.popen([&quot;ls&quot;, &quot;/&quot;, :err=&gt;&quot;/dev/null&quot;])\n  ls_result_with_error = ls_io.read\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Raises exceptions which <tt>IO.pipe</tt> and <tt>Kernel.spawn</tt> raise.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: If a block is given, Ruby will run the command as a child connected to Ruby with a pipe. Ruby's end of the pipe will be passed as a parameter to the block. At the end of block, Ruby close the pipe and sets <tt>$?</tt>. In this case <tt>IO.popen</tt> returns the value of the block.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "If a block is given with a <em>cmd</em> of ``<tt>-</tt>'', the block will be run in two separate processes: once in the parent, and once in a child. The parent process will be passed the pipe object as a parameter to the block, the child version of the block will be passed <tt>nil</tt>, and the child's standard in and standard out will be connected to the parent through the pipe. Not available on all platforms."
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "   f = IO.popen(&quot;uname&quot;)\n   p f.readlines\n   puts &quot;Parent is #{Process.pid}&quot;\n   IO.popen(&quot;date&quot;) { |f| puts f.gets }\n   IO.popen(&quot;-&quot;) {|f| $stderr.puts &quot;#{Process.pid} is here, f is #{f}&quot;}\n   p $?\n   IO.popen(%w&quot;sed -e s|^|&lt;foo&gt;| -e s&amp;$&amp;;zot;&amp;&quot;, &quot;r+&quot;) {|f|\n     f.puts &quot;bar&quot;; f.close_write; puts f.gets\n   }\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: <em>produces:</em>
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "   [&quot;Linux\\n&quot;]\n   Parent is 26166\n   Wed Apr  9 08:53:52 CDT 2003\n   26169 is here, f is\n   26166 is here, f is #&lt;IO:0x401b3d44&gt;\n   #&lt;Process::Status: pid=26166,exited(0)&gt;\n   &lt;foo&gt;bar;zot;\n"
full_name: IO::popen
is_singleton: true
name: popen
params: |
  IO.popen(cmd, mode="r" [, opt])               => io
  IO.popen(cmd, mode="r" [, opt]) {|io| block } => obj

visibility: public
