--- !ruby/object:RDoc::RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Iterates the given block over all prime numbers.
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 2
  :text: Parameters
- !ruby/object:RDoc::Markup::Flow::LIST 
  contents: 
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "+ubound+:"
    :body: Optional. An arbitrary positive number. The upper bound of enumeration. The method enumerates prime numbers infinitely if <tt>ubound</tt> is nil.
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "+generator+:"
    :body: Optional. An implementation of pseudo-prime generator.
  type: :NOTE
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 2
  :text: Return value
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: An evaluated value of the given block at the last time. Or an enumerator which is compatible to an <tt>Enumerator</tt> if no block given.
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 2
  :text: Description
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Calls <tt>block</tt> once for each prime number, passing the prime as a parameter.
- !ruby/object:RDoc::Markup::Flow::LIST 
  contents: 
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "+ubound+:"
    :body: Upper bound of prime numbers. The iterator stops after yields all prime numbers p &lt;= <tt>ubound</tt>.
  type: :NOTE
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 2
  :text: Note
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: <tt>Prime</tt>.<tt>new</tt> returns a object extended by <tt>Prime</tt>::<tt>OldCompatibility</tt> in order to compatibility to Ruby 1.8, and <tt>Prime</tt>#each is overwritten by <tt>Prime</tt>::<tt>OldCompatibility</tt>#<tt>each</tt>.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: <tt>Prime</tt>.<tt>new</tt> is now obsolete. Use <tt>Prime</tt>.<tt>instance</tt>.<tt>each</tt> or simply <tt>Prime</tt>.<tt>each</tt>.
full_name: Prime#each
is_singleton: false
name: each
params: (ubound = nil, generator = EratosthenesGenerator.new, &block)
visibility: public
