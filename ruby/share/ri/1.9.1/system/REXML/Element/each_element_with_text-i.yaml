--- !ruby/object:RDoc::RI::MethodDescription 
aliases: []

block_params: Element
comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Iterates through the children, yielding for each Element that has a particular text set.
- !ruby/object:RDoc::Markup::Flow::LIST 
  contents: 
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "text:"
    :body: the text to search for. If nil, or not supplied, will iterate over all <tt>Element</tt> children that contain at least one <tt>Text</tt> node.
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "max:"
    :body: (optional) causes this method to return after yielding for this number of matching children
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "name:"
    :body: (optional) if supplied, this is an XPath that filters the children to check.
  type: :NOTE
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: " doc = Document.new '&lt;a&gt;<b>b</b>&lt;c&gt;b&lt;/c&gt;&lt;d&gt;d&lt;/d&gt;&lt;e/&gt;&lt;/a&gt;'\n # Yields b, c, d\n doc.each_element_with_text {|e|p e}\n # Yields b, c\n doc.each_element_with_text('b'){|e|p e}\n # Yields b\n doc.each_element_with_text('b', 1){|e|p e}\n # Yields d\n doc.each_element_with_text(nil, 0, 'd'){|e|p e}\n"
full_name: REXML::Element#each_element_with_text
is_singleton: false
name: each_element_with_text
params: ( text=nil, max=0, name=nil ) {|Element| ...}
visibility: public
