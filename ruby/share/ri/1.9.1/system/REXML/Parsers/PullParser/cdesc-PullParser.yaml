--- !ruby/object:RDoc::RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 1
  :text: Using the Pull Parser
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: <em>This API is experimental, and subject to change.</em>
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: " parser = PullParser.new( &quot;&lt;a&gt;text&lt;b att='val'/&gt;txet&lt;/a&gt;&quot; )\n while parser.has_next?\n   res = parser.next\n   puts res[1]['att'] if res.start_tag? and res[0] == 'b'\n end\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: See the PullEvent class for information on the content of the results. The data is identical to the arguments passed for the various events to the StreamListener API.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "Notice that:"
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: " parser = PullParser.new( &quot;&lt;a&gt;BAD DOCUMENT&quot; )\n while parser.has_next?\n   res = parser.next\n   raise res[1] if res.error?\n end\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Nat Price gave me some good ideas for the API.
constants: []

full_name: REXML::Parsers::PullParser
includes: 
- !ruby/object:RDoc::RI::IncludedModule 
  name: XMLTokens
instance_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: add_listener
- !ruby/object:RDoc::RI::MethodSummary 
  name: each
- !ruby/object:RDoc::RI::MethodSummary 
  name: peek
- !ruby/object:RDoc::RI::MethodSummary 
  name: pull
- !ruby/object:RDoc::RI::MethodSummary 
  name: unshift
name: PullParser
superclass: Object
