--- !ruby/object:RDoc::RI::ClassDescription 
attributes: []

class_methods: []

comment: 
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 1
  :text: Fortran95 RDoc Parser
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 2
  :text: Overview
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: This parser parses Fortran95 files with suffixes &quot;f90&quot;, &quot;F90&quot;, &quot;f95&quot; and &quot;F95&quot;. Fortran95 files are expected to be conformed to Fortran95 standards.
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 2
  :text: Rules
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Fundamental rules are same as that of the Ruby parser. But comment markers are '!' not '#'.
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 3
  :text: Correspondence between RDoc documentation and Fortran95 programs
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: F95 parses main programs, modules, subroutines, functions, derived-types, public variables, public constants, defined operators and defined assignments. These components are described in items of RDoc documentation, as follows.
- !ruby/object:RDoc::Markup::Flow::LIST 
  contents: 
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "Files :"
    :body: Files (same as Ruby)
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "Classes:"
    :body: Modules
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "Methods:"
    :body: Subroutines, functions, variables, constants, derived-types, defined operators, defined assignments
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "Required files:"
    :body: Files in which imported modules, external subroutines and external functions are defined.
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "Included Modules:"
    :body: List of imported modules
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "Attributes:"
    :body: List of derived-types, List of imported modules all of whose components are published again
  type: :NOTE
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Components listed in 'Methods' (subroutines, functions, ...) defined in modules are described in the item of 'Classes'. On the other hand, components defined in main programs or as external procedures are described in the item of 'Files'.
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 3
  :text: Components parsed by default
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: By default, documentation on public components (subroutines, functions, variables, constants, derived-types, defined operators, defined assignments) are generated.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: With &quot;--all&quot; option, documentation on all components are generated (almost same as the Ruby parser).
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 3
  :text: Information parsed automatically
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The following information is automatically parsed.
- !ruby/object:RDoc::Markup::Flow::LIST 
  contents: 
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "*"
    :body: Types of arguments
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "*"
    :body: Types of variables and constants
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "*"
    :body: Types of variables in the derived types, and initial values
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "*"
    :body: NAMELISTs and types of variables in them, and initial values
  type: :BULLET
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Aliases by interface statement are described in the item of 'Methods'.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Components which are imported from other modules and published again are described in the item of 'Methods'.
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 3
  :text: Format of comment blocks
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Comment blocks should be written as follows.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Comment blocks are considered to be ended when the line without '!' appears.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The indentation is not necessary.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  ! (Top of file)\n  !\n  ! Comment blocks for the files.\n  !\n  !--\n  ! The comment described in the part enclosed by\n  ! &quot;!--&quot; and &quot;!++&quot; is ignored.\n  !++\n  !\n  module hogehoge\n    !\n    ! Comment blocks for the modules (or the programs).\n    !\n\n    private\n\n    logical            :: a     ! a private variable\n    real, public       :: b     ! a public variable\n    integer, parameter :: c = 0 ! a public constant\n\n    public :: c\n    public :: MULTI_ARRAY\n    public :: hoge, foo\n\n    type MULTI_ARRAY\n      !\n      ! Comment blocks for the derived-types.\n      !\n      real, pointer :: var(:) =&gt;null() ! Comments block for the variables.\n      integer       :: num = 0\n    end type MULTI_ARRAY\n\n  contains\n\n    subroutine hoge( in,   &amp;   ! Comment blocks between continuation lines are ignored.\n        &amp;            out )\n      !\n      ! Comment blocks for the subroutines or functions\n      !\n      character(*),intent(in):: in ! Comment blocks for the arguments.\n      character(*),intent(out),allocatable,target  :: in\n                                   ! Comment blocks can be\n                                   ! written under Fortran statements.\n\n      character(32) :: file ! This comment parsed as a variable in below NAMELIST.\n      integer       :: id\n\n      namelist /varinfo_nml/ file, id\n              !\n              ! Comment blocks for the NAMELISTs.\n              ! Information about variables are described above.\n              !\n\n    ....\n\n    end subroutine hoge\n\n    integer function foo( in )\n      !\n      ! This part is considered as comment block.\n\n      ! Comment blocks under blank lines are ignored.\n      !\n      integer, intent(in):: inA ! This part is considered as comment block.\n\n                                ! This part is ignored.\n\n    end function foo\n\n    subroutine hide( in,   &amp;\n      &amp;              out )      !:nodoc:\n      !\n      ! If &quot;!:nodoc:&quot; is described at end-of-line in subroutine\n      ! statement as above, the subroutine is ignored.\n      ! This assignment can be used to modules, subroutines,\n      ! functions, variables, constants, derived-types,\n      ! defined operators, defined assignments,\n      ! list of imported modules (&quot;use&quot; statement).\n      !\n\n    ....\n\n    end subroutine hide\n\n  end module hogehoge\n"
constants: 
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/object:RDoc::Markup::Flow::LIST 
    contents: 
    - !ruby/struct:RDoc::Markup::Flow::LI 
      :label: "\"false\":"
      :body: Comments are below source code
    - !ruby/struct:RDoc::Markup::Flow::LI 
      :label: "\"true\" :"
      :body: Comments are upper source code
    type: :NOTE
  name: COMMENTS_ARE_UPPER
  value: "false"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: Internal alias message
  name: INTERNAL_ALIAS_MES
  value: "\"Alias for\""
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: External alias message
  name: EXTERNAL_ALIAS_MES
  value: "\"The entity is\""
full_name: RDoc::Parser::F95
includes: []

instance_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: block_end?
- !ruby/object:RDoc::RI::MethodSummary 
  name: block_start?
- !ruby/object:RDoc::RI::MethodSummary 
  name: check_external_aliases
- !ruby/object:RDoc::RI::MethodSummary 
  name: check_public_methods
- !ruby/object:RDoc::RI::MethodSummary 
  name: collect_first_comment
- !ruby/object:RDoc::RI::MethodSummary 
  name: comment_out?
- !ruby/object:RDoc::RI::MethodSummary 
  name: continuous_line?
- !ruby/object:RDoc::RI::MethodSummary 
  name: definition_info
- !ruby/object:RDoc::RI::MethodSummary 
  name: find_arguments
- !ruby/object:RDoc::RI::MethodSummary 
  name: find_comments
- !ruby/object:RDoc::RI::MethodSummary 
  name: find_namelists
- !ruby/object:RDoc::RI::MethodSummary 
  name: find_visibility
- !ruby/object:RDoc::RI::MethodSummary 
  name: initialize_external_method
- !ruby/object:RDoc::RI::MethodSummary 
  name: initialize_public_method
- !ruby/object:RDoc::RI::MethodSummary 
  name: parse_program_or_module
- !ruby/object:RDoc::RI::MethodSummary 
  name: parse_subprogram
- !ruby/object:RDoc::RI::MethodSummary 
  name: parse_visibility
- !ruby/object:RDoc::RI::MethodSummary 
  name: remove_empty_head_lines
- !ruby/object:RDoc::RI::MethodSummary 
  name: remove_header_marker
- !ruby/object:RDoc::RI::MethodSummary 
  name: remove_private_comments
- !ruby/object:RDoc::RI::MethodSummary 
  name: remove_trailing_alias
- !ruby/object:RDoc::RI::MethodSummary 
  name: scan
- !ruby/object:RDoc::RI::MethodSummary 
  name: semicolon_to_linefeed
- !ruby/object:RDoc::RI::MethodSummary 
  name: set_visibility
- !ruby/object:RDoc::RI::MethodSummary 
  name: united_to_one_line
name: F95
superclass: RDoc::Parser
