--- !ruby/object:RDoc::RI::ClassDescription 
attributes: 
- !ruby/object:RDoc::RI::Attribute 
  comment: 
  name: context
  rw: RW
class_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Subclass of the RDoc::Markup::ToHtml class that supports looking up words in the AllReferences list. Those that are found (like AllReferences in this comment) will be hyperlinked
constants: 
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: Regular expressions to match class and method references.
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: 1.) There can be a '\' in front of text to suppress
  - !ruby/struct:RDoc::Markup::Flow::VERB 
    :body: "    any cross-references (note, however, that the single '\\'\n    is written as '\\\\' in order to escape it twice, once\n    in the Ruby String literal and once in the regexp).\n"
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: 2.) There can be a '::' in front of class names to reference
  - !ruby/struct:RDoc::Markup::Flow::VERB 
    :body: "    from the top-level namespace.\n"
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: 3.) The method can be followed by parenthesis,
  - !ruby/struct:RDoc::Markup::Flow::VERB 
    :body: "    which may or may not have things inside (this\n    apparently is allowed for Fortran 95, but I also think that this\n    is a good idea for Ruby, as it is very reasonable to want to\n    reference a call with arguments).\n"
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: "NOTE: In order to support Fortran 95 properly, the [A-Z] below should be changed to [A-Za-z]. This slows down rdoc significantly, however, and the Fortran 95 support is broken in any case due to the return in handle_special_CROSSREF if the token consists entirely of lowercase letters."
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: The markup/cross-referencing engine needs a rewrite for Fortran 95 to be supported properly.
  name: CLASS_REGEXP_STR
  value: "'\\\\\\\\?((?:\\:{2})?[A-Z]\\w*(?:\\:\\:\\w+)*)'"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: METHOD_REGEXP_STR
  value: "'(\\w+[!?=]?)(?:\\([\\.\\w+\\*\\/\\+\\-\\=\\<\\>]*\\))?'"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: Regular expressions matching text that should potentially have cross-reference links generated are passed to add_special. Note that these expressions are meant to pick up text for which cross-references have been suppressed, since the suppression characters are removed by the code that is triggered.
  name: CROSSREF_REGEXP
  value: "/(                       # A::B::C.meth                       #{CLASS_REGEXP_STR}[\\.\\#]#{METHOD_REGEXP_STR}                        # Stand-alone method (proceeded by a #)                       | \\\\?\\##{METHOD_REGEXP_STR}                        # A::B::C                       # The stuff after CLASS_REGEXP_STR is a                       # nasty hack.  CLASS_REGEXP_STR unfortunately matches                       # words like dog and cat (these are legal \"class\"                       # names in Fortran 95).  When a word is flagged as a                       # potential cross-reference, limitations in the markup                       # engine suppress other processing, such as typesetting.                       # This is particularly noticeable for contractions.                       # In order that words like \"can't\" not                       # be flagged as potential cross-references, only                       # flag potential class cross-references if the character                       # after the cross-referece is a space or sentence                       # punctuation.                       | #{CLASS_REGEXP_STR}(?=[\\s\\)\\.\\?\\!\\,\\;]|\\z)                        # Things that look like filenames                       # The key thing is that there must be at least                       # one special character (period, slash, or                       # underscore).                       | [\\/\\w]+[_\\/\\.][\\w\\/\\.]+                        # Things that have markup suppressed                       | \\\\[^\\s]                       )/x"
full_name: RDoc::Markup::ToHtmlCrossref
includes: []

instance_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: handle_special_CROSSREF
name: ToHtmlCrossref
superclass: RDoc::Markup::ToHtml
