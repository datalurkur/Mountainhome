--- !ruby/object:RDoc::RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Requests a connection to be made on the given <tt>server_sockaddr</tt> after O_NONBLOCK is set for the underlying file descriptor. Returns 0 if successful, otherwise an exception is raised.
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 3
  :text: Parameter
- !ruby/object:RDoc::Markup::Flow::LIST 
  contents: 
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "*"
    :body: <tt>server_sockaddr</tt> - the <tt>struct</tt> sockaddr contained in a string
  type: :BULLET
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 3
  :text: "Example:"
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "     # Pull down Google's web page\n     require 'socket'\n     include Socket::Constants\n     socket = Socket.new(AF_INET, SOCK_STREAM, 0)\n     sockaddr = Socket.sockaddr_in(80, 'www.google.com')\n     begin # emulate blocking connect\n       socket.connect_nonblock(sockaddr)\n     rescue Errno::EINPROGRESS\n       IO.select(nil, [socket])\n       begin\n         socket.connect_nonblock(sockaddr)\n       rescue Errno::EISCONN\n       end\n     end\n     socket.write(&quot;GET / HTTP/1.0\\r\\n\\r\\n&quot;)\n     results = socket.read\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Refer to Socket#connect for the exceptions that may be thrown if the call to <em>connect_nonblock</em> fails.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Socket#connect_nonblock may raise any error corresponding to connect(2) failure, including Errno::EINPROGRESS.
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 3
  :text: See
- !ruby/object:RDoc::Markup::Flow::LIST 
  contents: 
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "*"
    :body: Socket#connect
  type: :BULLET
full_name: Socket#connect_nonblock
is_singleton: false
name: connect_nonblock
params: |
  socket.connect_nonblock(server_sockaddr) => 0

visibility: public
