--- !ruby/object:RDoc::RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: OpenURI::OpenRead#open provides `open' for URI::HTTP and URI::FTP.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "OpenURI::OpenRead#open takes optional 3 arguments as: OpenURI::OpenRead#open([mode [, perm]] [, options]) [{|io| ... }]"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: `mode', `perm' is same as Kernel#open.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: However, `mode' must be read mode because OpenURI::OpenRead#open doesn't support write mode (yet). Also `perm' is just ignored because it is meaningful only for file creation.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: `options' must be a hash.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Each pairs which key is a string in the hash specify a extra header field for HTTP. I.e. it is ignored for FTP without HTTP proxy.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "The hash may include other options which key is a symbol:"
- !ruby/object:RDoc::Markup::Flow::LIST 
  contents: 
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: ":proxy"
    :body: "Synopsis:"
  - !ruby/struct:RDoc::Markup::Flow::VERB 
    :body: "  :proxy =&gt; &quot;http://proxy.foo.com:8000/&quot;\n  :proxy =&gt; URI.parse(&quot;http://proxy.foo.com:8000/&quot;)\n  :proxy =&gt; true\n  :proxy =&gt; false\n  :proxy =&gt; nil\n"
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: If :proxy option is specified, the value should be String, URI, boolean or nil. When String or URI is given, it is treated as proxy URI. When true is given or the option itself is not specified, environment variable `scheme_proxy' is examined. `scheme' is replaced by `http', `https' or `ftp'. When false or nil is given, the environment variables are ignored and connection will be made to a server directly.
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: ":proxy_http_basic_authentication"
    :body: "Synopsis:"
  - !ruby/struct:RDoc::Markup::Flow::VERB 
    :body: "  :proxy_http_basic_authentication =&gt; [&quot;http://proxy.foo.com:8000/&quot;, &quot;proxy-user&quot;, &quot;proxy-password&quot;]\n  :proxy_http_basic_authentication =&gt; [URI.parse(&quot;http://proxy.foo.com:8000/&quot;), &quot;proxy-user&quot;, &quot;proxy-password&quot;]\n"
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: If :proxy option is specified, the value should be an Array with 3 elements. It should contain a proxy URI, a proxy user name and a proxy password. The proxy URI should be a String, an URI or nil. The proxy user name and password should be a String.
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: If nil is given for the proxy URI, this option is just ignored.
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: If :proxy and :proxy_http_basic_authentication is specified, ArgumentError is raised.
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: ":http_basic_authentication"
    :body: "Synopsis:"
  - !ruby/struct:RDoc::Markup::Flow::VERB 
    :body: "  :http_basic_authentication=&gt;[user, password]\n"
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: "If :http_basic_authentication is specified, the value should be an array which contains 2 strings: username and password. It is used for HTTP Basic authentication defined by RFC 2617."
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: ":content_length_proc"
    :body: "Synopsis:"
  - !ruby/struct:RDoc::Markup::Flow::VERB 
    :body: "  :content_length_proc =&gt; lambda {|content_length| ... }\n"
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: If :content_length_proc option is specified, the option value procedure is called before actual transfer is started. It takes one argument which is expected content length in bytes.
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: If two or more transfer is done by HTTP redirection, the procedure is called only one for a last transfer.
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: When expected content length is unknown, the procedure is called with nil. It is happen when HTTP response has no Content-Length header.
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: ":progress_proc"
    :body: "Synopsis:"
  - !ruby/struct:RDoc::Markup::Flow::VERB 
    :body: "  :progress_proc =&gt; lambda {|size| ...}\n"
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: If :progress_proc option is specified, the proc is called with one argument each time when `open' gets content fragment from network. The argument `size' `size' is a accumulated transfered size in bytes.
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: If two or more transfer is done by HTTP redirection, the procedure is called only one for a last transfer.
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: ":progress_proc and :content_length_proc are intended to be used for progress bar. For example, it can be implemented as follows using Ruby/ProgressBar."
  - !ruby/struct:RDoc::Markup::Flow::VERB 
    :body: "  pbar = nil\n  open(&quot;http://...&quot;,\n    :content_length_proc =&gt; lambda {|t|\n      if t &amp;&amp; 0 &lt; t\n        pbar = ProgressBar.new(&quot;...&quot;, t)\n        pbar.file_transfer_mode\n      end\n    },\n    :progress_proc =&gt; lambda {|s|\n      pbar.set s if pbar\n    }) {|f| ... }\n"
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: ":read_timeout"
    :body: "Synopsis:"
  - !ruby/struct:RDoc::Markup::Flow::VERB 
    :body: "  :read_timeout=&gt;nil     (no timeout)\n  :read_timeout=&gt;10      (10 second)\n"
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: ":read_timeout option specifies a timeout of read for http connections."
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: ":ssl_ca_cert"
    :body: "Synopsis:"
  - !ruby/struct:RDoc::Markup::Flow::VERB 
    :body: "  :ssl_ca_cert=&gt;filename\n"
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: ":ssl_ca_cert is used to specify CA certificate for SSL. If it is given, default certificates are not used."
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: ":ssl_verify_mode"
    :body: "Synopsis:"
  - !ruby/struct:RDoc::Markup::Flow::VERB 
    :body: "  :ssl_verify_mode=&gt;mode\n"
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: ":ssl_verify_mode is used to specify openssl verify mode."
  type: :LABELED
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: OpenURI::OpenRead#open returns an IO like object if block is not given. Otherwise it yields the IO object and return the value of the block. The IO object is extended with OpenURI::Meta.
- !ruby/object:RDoc::Markup::Flow::LIST 
  contents: 
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: ":ftp_active_mode"
    :body: "Synopsis:"
  - !ruby/struct:RDoc::Markup::Flow::VERB 
    :body: "  :ftp_active_mode=&gt;bool\n"
  type: :LABELED
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: ":ftp_active_mode=&gt;true is used to make ftp active mode. Note that the active mode is default in Ruby 1.8 or prior. Ruby 1.9 uses passive mode by default."
- !ruby/object:RDoc::Markup::Flow::LIST 
  contents: 
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: ":redirect"
    :body: "Synopsis:"
  - !ruby/struct:RDoc::Markup::Flow::VERB 
    :body: "  :redirect=&gt;bool\n"
  type: :LABELED
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: ":redirect=&gt;false is used to disable HTTP redirects at all. OpenURI::HTTPRedirect exception raised on redirection. It is true by default. The true means redirections between http and ftp is permitted."
full_name: OpenURI::OpenRead#open
is_singleton: false
name: open
params: (*rest, &block)
visibility: public
