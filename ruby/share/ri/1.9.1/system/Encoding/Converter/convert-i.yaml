--- !ruby/object:RDoc::RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Convert source_string and return destination_string.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: source_string is assumed as a part of source. i.e. :partial_input=&gt;true is specified internally. finish method should be used last.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  ec = Encoding::Converter.new(&quot;utf-8&quot;, &quot;euc-jp&quot;)\n  puts ec.convert(&quot;\\u3042&quot;).dump     #=&gt; &quot;\\xA4\\xA2&quot;\n  puts ec.finish.dump                #=&gt; &quot;&quot;\n\n  ec = Encoding::Converter.new(&quot;euc-jp&quot;, &quot;utf-8&quot;)\n  puts ec.convert(&quot;\\xA4&quot;).dump       #=&gt; &quot;&quot;\n  puts ec.convert(&quot;\\xA2&quot;).dump       #=&gt; &quot;\\xE3\\x81\\x82&quot;\n  puts ec.finish.dump                #=&gt; &quot;&quot;\n\n  ec = Encoding::Converter.new(&quot;utf-8&quot;, &quot;iso-2022-jp&quot;)\n  puts ec.convert(&quot;\\xE3&quot;).dump       #=&gt; &quot;&quot;.force_encoding(&quot;ISO-2022-JP&quot;)\n  puts ec.convert(&quot;\\x81&quot;).dump       #=&gt; &quot;&quot;.force_encoding(&quot;ISO-2022-JP&quot;)\n  puts ec.convert(&quot;\\x82&quot;).dump       #=&gt; &quot;\\e$B$\\&quot;&quot;.force_encoding(&quot;ISO-2022-JP&quot;)\n  puts ec.finish.dump                #=&gt; &quot;\\e(B&quot;.force_encoding(&quot;ISO-2022-JP&quot;)\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: If a conversion error occur, Encoding::UndefinedConversionError or Encoding::InvalidByteSequenceError is raised. Encoding::Converter#convert doesn't supply methods to recover or restart from these exceptions. When you want to handle these conversion errors, use Encoding::Converter#primitive_convert.
full_name: Encoding::Converter#convert
is_singleton: false
name: convert
params: |
  ec.convert(source_string) -> destination_string

visibility: public
