--- !ruby/object:RDoc::RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: current
- !ruby/object:RDoc::RI::MethodSummary 
  name: yield
comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Fibers are primitives for implementing light weight cooperative concurrency in Ruby. Basically they are a means of creating code blocks that can be paused and resumed, much like threads. The main difference is that they are never preempted and that the scheduling must be done by the programmer and not the VM.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: As opposed to other stackless light weight concurrency models, each fiber comes with a small 4KB stack. This enables the fiber to be paused from deeply nested function calls within the fiber block.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: When a fiber is created it will not run automatically. Rather it must be be explicitly asked to run using the <tt>Fiber#resume</tt> method. The code running inside the fiber can give up control by calling <tt>Fiber.yield</tt> in which case it yields control back to caller (the caller of the <tt>Fiber#resume</tt>).
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Upon yielding or termination the Fiber returns the value of the last executed expression
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "For instance:"
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  fiber = Fiber.new do\n    Fiber.yield 1\n    2\n  end\n\n  puts fiber.resume\n  puts fiber.resume\n  puts fiber.resume\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: <em>produces</em>
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  1\n  2\n  FiberError: dead fiber called\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The <tt>Fiber#resume</tt> method accepts an arbitary number of parameters, if it is the first call to <tt>resume</tt> then they will be passed as block arguments. Otherwise they will be the return value of the call to <tt>Fiber.yield</tt>
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "Example:"
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  fiber = Fiber.new do |first|\n    second = Fiber.yield first + 2\n  end\n\n  puts fiber.resume 10\n  puts fiber.resume 14\n  puts fiber.resume 18\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: <em>produces</em>
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  12\n  14\n  FiberError: dead fiber called\n"
constants: []

full_name: Fiber
includes: []

instance_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: alive?
- !ruby/object:RDoc::RI::MethodSummary 
  name: resume
- !ruby/object:RDoc::RI::MethodSummary 
  name: transfer
name: Fiber
superclass: Object
