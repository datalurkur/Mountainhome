--- !ruby/object:RDoc::RI::ModuleDescription 
attributes: []

class_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: timeout
comment: 
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 1
  :text: timeout.rb
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: execution timeout
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 1
  :text: Synopsis
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  require 'timeout'\n  status = Timeout::timeout(5) {\n    # Something that should be interrupted if it takes too much time...\n  }\n"
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 1
  :text: Description
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: A way of performing a potentially long-running operation in a thread, and terminating it's execution if it hasn't finished by a fixed amount of time.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "Previous versions of timeout didn't provide use a module for namespace. This version provides both Timeout.timeout, and a backwards-compatible #timeout."
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 1
  :text: Copyright
- !ruby/object:RDoc::Markup::Flow::LIST 
  contents: 
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "Copyright:"
    :body: (C) 2000 Network Applied Communication Laboratory, Inc.
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: "Copyright:"
    :body: (C) 2000 Information-technology Promotion Agency, Japan
  type: :NOTE
constants: 
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: THIS_FILE
  value: /\A#{Regexp.quote(__FILE__)}:/o
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: CALLER_OFFSET
  value: "((c = caller[0]) && THIS_FILE =~ c) ? 1 : 0"
full_name: Timeout
includes: []

instance_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: timeout
name: Timeout
