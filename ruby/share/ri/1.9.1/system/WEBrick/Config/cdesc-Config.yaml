--- !ruby/object:RDoc::RI::ModuleDescription 
attributes: []

class_methods: []

comment: 
constants: 
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: LIBDIR
  value: File::dirname(__FILE__)
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: for GenericServer
  name: General
  value: "{       :ServerName     => Utils::getservername,       :BindAddress    => nil,   # \"0.0.0.0\" or \"::\" or nil       :Port           => nil,   # users MUST specifiy this!!       :MaxClients     => 100,   # maximum number of the concurrent connections       :ServerType     => nil,   # default: WEBrick::SimpleServer       :Logger         => nil,   # default: WEBrick::Log.new       :ServerSoftware => \"WEBrick/#{WEBrick::VERSION} \" +                          \"(Ruby/#{RUBY_VERSION}/#{RUBY_RELEASE_DATE})\",       :TempDir        => ENV['TMPDIR']||ENV['TMP']||ENV['TEMP']||'/tmp',       :DoNotListen    => false,       :StartCallback  => nil,       :StopCallback   => nil,       :AcceptCallback => nil,       :DoNotReverseLookup => nil,       :ShutdownSocketWithoutClose => false,     }"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  - !ruby/struct:RDoc::Markup::Flow::P 
    :body: for HTTPServer, HTTPRequest, HTTPResponse ...
  name: HTTP
  value: "General.dup.update(       :Port           => 80,       :RequestTimeout => 30,       :HTTPVersion    => HTTPVersion.new(\"1.1\"),       :AccessLog      => nil,       :MimeTypes      => HTTPUtils::DefaultMimeTypes,       :DirectoryIndex => [\"index.html\",\"index.htm\",\"index.cgi\",\"index.rhtml\"],       :DocumentRoot   => nil,       :DocumentRootOptions => { :FancyIndexing => true },       :RequestCallback => nil,       :ServerAlias    => nil,       :InputBufferSize  => 65536, # input buffer size in reading request body       :OutputBufferSize => 65536, # output buffer size in sending File or IO        # for HTTPProxyServer       :ProxyAuthProc  => nil,       :ProxyContentHandler => nil,       :ProxyVia       => true,       :ProxyTimeout   => true,       :ProxyURI       => nil,        :CGIInterpreter => nil,       :CGIPathEnv     => nil,        # workaround: if Request-URIs contain 8bit chars,       # they should be escaped before calling of URI::parse().       :Escape8bitURI  => false     )"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: FileHandler
  value: "{       :NondisclosureName => [\".ht*\", \"*~\"],       :FancyIndexing     => false,       :HandlerTable      => {},       :HandlerCallback   => nil,       :DirectoryCallback => nil,       :FileCallback      => nil,       :UserDir           => nil,  # e.g. \"public_html\"       :AcceptableLanguages => []  # [\"en\", \"ja\", ... ]     }"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: BasicAuth
  value: "{       :AutoReloadUserDB     => true,     }"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: DigestAuth
  value: "{       :Algorithm            => 'MD5-sess', # or 'MD5'        :Domain               => nil,        # an array includes domain names.       :Qop                  => [ 'auth' ], # 'auth' or 'auth-int' or both.       :UseOpaque            => true,       :UseNextNonce         => false,       :CheckNc              => false,       :UseAuthenticationInfoHeader => true,       :AutoReloadUserDB     => true,       :NonceExpirePeriod    => 30*60,       :NonceExpireDelta     => 60,       :InternetExplorerHack => true,       :OperaHack            => true,     }"
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: SSL
  value: "{       :ServerSoftware       => \"#{svrsoft} OpenSSL/#{osslv}\",       :SSLEnable            => false,       :SSLCertificate       => nil,       :SSLPrivateKey        => nil,       :SSLClientCA          => nil,       :SSLExtraChainCert    => nil,       :SSLCACertificateFile => nil,       :SSLCACertificatePath => nil,       :SSLCertificateStore  => nil,       :SSLVerifyClient      => ::OpenSSL::SSL::VERIFY_NONE,       :SSLVerifyDepth       => nil,       :SSLVerifyCallback    => nil,   # custom verification       :SSLTimeout           => nil,       :SSLOptions           => nil,       :SSLStartImmediately  => true,       # Must specify if you use auto generated certificate.       :SSLCertName          => nil,       :SSLCertComment       => \"Generated by Ruby/OpenSSL\"     }"
full_name: WEBrick::Config
includes: []

instance_methods: []

name: Config
