--- !ruby/object:RDoc::RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Similar to <tt>Kernel::system</tt> except for not waiting for end of <em>cmd</em>, but returns its <em>pid</em>.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: If a hash is given as <tt>env</tt>, the environment is updated by <tt>env</tt> before <tt>exec(2)</tt> in the child process. If a pair in <tt>env</tt> has nil as the value, the variable is deleted.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  # set FOO as BAR and unset BAZ.\n  pid = spawn({&quot;FOO&quot;=&gt;&quot;BAR&quot;, &quot;BAZ&quot;=&gt;nil}, command)\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: If a hash is given as <tt>options</tt>, it specifies process group, resource limit, current directory, umask and redirects for the child process. Also, it can be specified to clear environment variables.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The <tt>:unsetenv_others</tt> key in <tt>options</tt> specifies to clear environment variables, other than specified by <tt>env</tt>.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  pid = spawn(command, :unsetenv_others=&gt;true) # no environment variable\n  pid = spawn({&quot;FOO&quot;=&gt;&quot;BAR&quot;}, command, :unsetenv_others=&gt;true) # FOO only\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The <tt>:pgroup</tt> key in <tt>options</tt> specifies a process group. The corresponding value should be true, zero or positive integer. true and zero means the process should be a process leader. Other values specifies a process group to be belongs.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  pid = spawn(command, :pgroup=&gt;true) # process leader\n  pid = spawn(command, :pgroup=&gt;10) # belongs to the process group 10\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "The <tt>:rlimit_</tt><em>foo</em> key specifies a resource limit. <em>foo</em> should be one of resource types such as <tt>core</tt> The corresponding value should be an integer or an array which have one or two integers: same as cur_limit and max_limit arguments for Process.setrlimit."
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  pid = spawn(command, :rlimit_core=&gt;0) # never dump core.\n  cur, max = Process.getrlimit(:CORE)\n  pid = spawn(command, :rlimit_core=&gt;[0,max]) # disable core temporary.\n  pid = spawn(command, :rlimit_core=&gt;max) # enable core dump\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The <tt>:chdir</tt> key in <tt>options</tt> specifies the current directory.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  pid = spawn(command, :chdir=&gt;&quot;/var/tmp&quot;)\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The <tt>:umask</tt> key in <tt>options</tt> specifies the umask.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  pid = spawn(command, :umask=&gt;077)\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The :in, :out, :err, a fixnum, an IO and an array key specifies a redirect. The redirection maps a file descriptor in the child process.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "For example, stderr can be merged into stdout:"
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  pid = spawn(command, :err=&gt;:out)\n  pid = spawn(command, STDERR=&gt;STDOUT)\n  pid = spawn(command, 2=&gt;1)\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The hash keys specifies a file descriptor in the child process started by <tt>spawn</tt>. :err, STDERR and 2 specifies the standard error stream.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The hash values specifies a file descriptor in the parent process which invokes <tt>spawn</tt>. :out, STDOUT and 1 specifies the standard output stream.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The standard output in the child process is not specified. So it is inherited from the parent process.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The standard input stream can be specifed by :in, STDIN and 0.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: A filename can be specified as a hash value.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  pid = spawn(command, STDIN=&gt;&quot;/dev/null&quot;) # read mode\n  pid = spawn(command, STDOUT=&gt;&quot;/dev/null&quot;) # write mode\n  pid = spawn(command, STDERR=&gt;&quot;log&quot;) # write mode\n  pid = spawn(command, 3=&gt;&quot;/dev/null&quot;) # read mode\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: For standard output and standard error, it is opened in write mode. Otherwise read mode is used.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: For specifying flags and permission of file creation explicitly, an array is used instead.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  pid = spawn(command, STDIN=&gt;[&quot;file&quot;]) # read mode is assumed\n  pid = spawn(command, STDIN=&gt;[&quot;file&quot;, &quot;r&quot;])\n  pid = spawn(command, STDOUT=&gt;[&quot;log&quot;, &quot;w&quot;]) # 0644 assumed\n  pid = spawn(command, STDOUT=&gt;[&quot;log&quot;, &quot;w&quot;, 0600])\n  pid = spawn(command, STDOUT=&gt;[&quot;log&quot;, File::WRONLY|File::EXCL|File::CREAT, 0600])\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The array specifies a filename, flags and permission. The flags can be a string or an integer. If the flags is ommitted or nil, File::RDONLY is assumed. The permission should be an integer. If the permission is ommitted or nil, 0644 is assumed.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: If an array of IOs and integers are specified as a hash key, all the elemetns are redirected.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  # standard output and standard error is redirected to log file.\n  pid = spawn(command, [STDOUT, STDERR]=&gt;[&quot;log&quot;, &quot;w&quot;])\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: spawn closes all non-standard unspecified descriptors by default. The &quot;standard&quot; descriptors are 0, 1 and 2. This behavior is specified by :close_others option. :close_others doesn't affect the standard descriptors which are closed only if :close is specified explicitly.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  pid = spawn(command, :close_others=&gt;true)  # close 3,4,5,... (default)\n  pid = spawn(command, :close_others=&gt;false) # don't close 3,4,5,...\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: ":close_others is true by default for spawn and IO.popen."
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: So IO.pipe and spawn can be used as IO.popen.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  # similar to r = IO.popen(command)\n  r, w = IO.pipe\n  pid = spawn(command, STDOUT=&gt;w)   # r, w is closed in the child process.\n  w.close\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: ":close is specified as a hash value to close a fd individualy."
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  f = open(foo)\n  system(command, f=&gt;:close)        # don't inherit f.\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: It is also possible to exchange file descriptors.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  pid = spawn(command, STDOUT=&gt;STDERR, STDERR=&gt;STDOUT)\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The hash keys specify file descriptors in the child process. The hash values specifies file descriptors in the parent process. So the above specifies exchanging STDOUT and STDERR. Internally, <tt>spawn</tt> uses an extra file descriptor to resolve such cyclic file descriptor mapping.
full_name: Kernel#spawn
is_singleton: false
name: spawn
params: |
  spawn([env,] cmd [, arg, ...] [,options])     => pid

visibility: public
