--- !ruby/object:RDoc::RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "   enum.reduce(initial, sym) =&gt; obj\n   enum.reduce(sym)          =&gt; obj\n   enum.reduce(initial) {| memo, obj | block }  =&gt; obj\n   enum.reduce          {| memo, obj | block }  =&gt; obj\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Combines all elements of <em>enum</em> by applying a binary operation, specified by a block or a symbol that names a method or operator.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: If you specify a block, then for each element in <em>enum&lt;i&gt; the block is passed an accumulator value (&lt;i&gt;memo</em>) and the element. If you specify a symbol instead, then each element in the collection will be passed to the named method of <em>memo</em>. In either case, the result becomes the new value for <em>memo</em>. At the end of the iteration, the final value of <em>memo</em> is the return value fo the method.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: If you do not explicitly specify an <em>initial</em> value for <em>memo</em>, then uses the first element of collection is used as the initial value of <em>memo</em>.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "Examples:"
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "   # Sum some numbers\n   (5..10).reduce(:+)                            #=&gt; 45\n   # Same using a block and inject\n   (5..10).inject {|sum, n| sum + n }            #=&gt; 45\n   # Multiply some numbers\n   (5..10).reduce(1, :*)                         #=&gt; 151200\n   # Same using a block\n   (5..10).inject(1) {|product, n| product * n } #=&gt; 151200\n   # find the longest word\n   longest = %w{ cat sheep bear }.inject do |memo,word|\n      memo.length &gt; word.length ? memo : word\n   end\n   longest                                       #=&gt; &quot;sheep&quot;\n"
full_name: Enumerable#inject
is_singleton: false
name: inject
params: |
  enum.inject(initial, sym) => obj
  enum.inject(sym)          => obj
  enum.inject(initial) {| memo, obj | block }  => obj
  enum.inject          {| memo, obj | block }  => obj

visibility: public
