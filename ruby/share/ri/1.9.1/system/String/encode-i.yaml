--- !ruby/object:RDoc::RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The first form returns a copy of <em>str</em> transcoded to encoding <tt>encoding</tt>. The second form returns a copy of <em>str</em> transcoded from src_encoding to dst_encoding. The last form returns a copy of <em>str</em> transcoded to <tt>Encoding.default_internal</tt>. By default, the first and second form raise Encoding::UndefinedConversionError for characters that are undefined in the destination encoding, and Encoding::InvalidByteSequenceError for invalid byte sequences in the source encoding. The last form by default does not raise exceptions but uses replacement strings. The <tt>options</tt> Hash gives details for conversion.
- !ruby/struct:RDoc::Markup::Flow::H 
  :level: 3
  :text: options
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: "The hash <tt>options</tt> can have the following keys:"
- !ruby/object:RDoc::Markup::Flow::LIST 
  contents: 
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: ":invalid :"
    :body: If the value is <tt>:replace</tt>, <tt>#encode</tt> replaces invalid byte sequences in <tt>str</tt> with the replacement character. The default is to raise the exception
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: ":undef :"
    :body: If the value is <tt>:replace</tt>, <tt>#encode</tt> replaces characters which are undefined in the destination encoding with the replacement character.
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: ":replace :"
    :body: Sets the replacement string to the value. The default replacement string is &quot;\uFFFD&quot; for Unicode encoding forms, and &quot;?&quot; otherwise.
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: ":xml :"
    :body: The value must be <tt>:text</tt> or <tt>:attr</tt>. If the value is <tt>:text</tt> <tt>#encode</tt> replaces undefined characters with their (upper-case hexadecimal) numeric character references. '&amp;', '&lt;', and '&gt;' are converted to &quot;&amp;amp;&quot;, &quot;&amp;lt;&quot;, and &quot;&amp;gt;&quot;, respectively. If the value is <tt>:attr</tt>, <tt>#encode</tt> also quotes the replacement result (using '&quot;'), and replaces '&quot;' with &quot;&amp;quot;&quot;.
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: ":cr_newline :"
    :body: Replaces LF (&quot;\n&quot;) with CR (&quot;\r&quot;) if value is true.
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: ":crlf_newline :"
    :body: Replaces LF (&quot;\n&quot;) with CRLF (&quot;\r\n&quot;) if value is true.
  - !ruby/struct:RDoc::Markup::Flow::LI 
    :label: ":universal_newline :"
    :body: Replaces CRLF (&quot;\r\n&quot;) and CR (&quot;\r&quot;) with LF (&quot;\n&quot;) if value is true.
  type: :NOTE
full_name: String#encode
is_singleton: false
name: encode
params: |
  str.encode(encoding [, options] )   => str
  str.encode(dst_encoding, src_encoding [, options] )   => str
  str.encode([options])   => str

visibility: public
