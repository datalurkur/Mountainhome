--- !ruby/object:RDoc::RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Returns true for a Proc object which argument handling is rigid. Such procs are typically generated by lambda.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: A Proc object generated by proc ignore extra arguments.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  proc {|a,b| [a,b] }.call(1,2,3)    =&gt; [1,2]\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: It provides nil for lacked arguments.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  proc {|a,b| [a,b] }.call(1)        =&gt; [1,nil]\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: It expand single-array argument.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  proc {|a,b| [a,b] }.call([1,2])    =&gt; [1,2]\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: A Proc object generated by lambda doesn't have such tricks.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  lambda {|a,b| [a,b] }.call(1,2,3)  =&gt; ArgumentError\n  lambda {|a,b| [a,b] }.call(1)      =&gt; ArgumentError\n  lambda {|a,b| [a,b] }.call([1,2])  =&gt; ArgumentError\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Proc#lambda? is a predicate for the tricks. It returns true if no tricks.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  lambda {}.lambda?          =&gt; true\n  proc {}.lambda?            =&gt; false\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: Proc.new is same as proc.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  Proc.new {}.lambda?        =&gt; false\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: lambda, proc and Proc.new preserves the tricks of a Proc object given by &amp; argument.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  lambda(&amp;lambda {}).lambda?   =&gt; true\n  proc(&amp;lambda {}).lambda?     =&gt; true\n  Proc.new(&amp;lambda {}).lambda? =&gt; true\n\n  lambda(&amp;proc {}).lambda?   =&gt; false\n  proc(&amp;proc {}).lambda?     =&gt; false\n  Proc.new(&amp;proc {}).lambda? =&gt; false\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: A Proc object generated by &amp; argument has the tricks
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  def n(&amp;b) b.lambda? end\n  n {}                       =&gt; false\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The &amp; argument preserves the tricks if a Proc object is given by &amp; argument.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  n(&amp;lambda {})              =&gt; true\n  n(&amp;proc {})                =&gt; false\n  n(&amp;Proc.new {})            =&gt; false\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: A Proc object converted from a method has no tricks.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  def m() end\n  method(:m).to_proc.lambda? =&gt; true\n\n  n(&amp;method(:m))             =&gt; true\n  n(&amp;method(:m).to_proc)     =&gt; true\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: define_method is treated same as method definition. The defined method has no tricks.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  class C\n    define_method(:d) {}\n  end\n  C.new.e(1,2)       =&gt; ArgumentError\n  C.new.method(:d).to_proc.lambda?   =&gt; true\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: define_method always defines a method without the tricks, even if a non-lambda Proc object is given. This is the only exception which the tricks are not preserved.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  class C\n    define_method(:e, &amp;proc {})\n  end\n  C.new.e(1,2)       =&gt; ArgumentError\n  C.new.method(:e).to_proc.lambda?   =&gt; true\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: This exception is for a wrapper of define_method. It eases defining a method defining method which defines a usual method which has no tricks.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "  class &lt;&lt; C\n    def def2(name, &amp;body)\n      define_method(name, &amp;body)\n    end\n  end\n  class C\n    def2(:f) {}\n  end\n  C.new.f(1,2)       =&gt; ArgumentError\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: The wrapper, def2, defines a method which has no tricks.
full_name: Proc#lambda?
is_singleton: false
name: lambda?
params: |
  prc.lambda? => true or false

visibility: public
