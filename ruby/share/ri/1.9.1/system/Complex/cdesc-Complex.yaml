--- !ruby/object:RDoc::RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: generic?
- !ruby/object:RDoc::RI::MethodSummary 
  name: yaml_new
comment: 
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: A complex number can be represented as a paired real number with imaginary unit; a+bi. Where a is real part, b is imaginary part and i is imaginary unit. Real a equals complex a+0i mathematically.
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: In ruby, you can create complex object with Complex, Complex::rect, Complex::polar or to_c method.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "   Complex(1)           #=&gt; (1+0i)\n   Complex(2, 3)        #=&gt; (2+3i)\n   Complex.polar(2, 3)  #=&gt; (-1.9799849932008908+0.2822400161197344i)\n   3.to_c               #=&gt; (3+0i)\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: You can also create complex object from floating-point numbers or strings.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "   Complex(0.3)         #=&gt; (0.3+0i)\n   Complex('0.3-0.5i')  #=&gt; (0.3-0.5i)\n   Complex('2/3+3/4i')  #=&gt; ((2/3)+(3/4)*i)\n   Complex('1@2')       #=&gt; (-0.4161468365471424+0.9092974268256817i)\n\n   0.3.to_c             #=&gt; (0.3+0i)\n   '0.3-0.5i'.to_c      #=&gt; (0.3-0.5i)\n   '2/3+3/4i'.to_c      #=&gt; ((2/3)+(3/4)*i)\n   '1@2'.to_c           #=&gt; (-0.4161468365471424+0.9092974268256817i)\n"
- !ruby/struct:RDoc::Markup::Flow::P 
  :body: A complex object is either an exact or an inexact number.
- !ruby/struct:RDoc::Markup::Flow::VERB 
  :body: "   Complex(1, 1) / 2    #=&gt; ((1/2)+(1/2)*i)\n   Complex(1, 1) / 2.0  #=&gt; (0.5+0.5i)\n"
constants: 
- !ruby/object:RDoc::RI::Constant 
  comment: 
  name: I
  value: f_complex_new_bang2(rb_cComplex, ZERO, ONE)
full_name: Complex
includes: []

instance_methods: 
- !ruby/object:RDoc::RI::MethodSummary 
  name: to_yaml
name: Complex
superclass: Numeric
