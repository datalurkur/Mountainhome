Skip to main content
My eBaySellCommunityContact usHelp
Enter your search keyword
From collectibles to cars, buy and sell all kinds of items on eBayWelcome! Sign in or register.
CATEGORIES FASHIONMOTORSDAILY DEALSCLASSIFIEDS
Click to Go Back to home pageBack to home page	 | 	
Listed in category:	
Bread Crumb Link

    * Specialty Services >
    * Artistic Services >
    * Photography

Also Listed in:	
Bread Crumb Link

    * Clothing, Shoes & Accessories >
    * Children's Clothing & Shoes >
    * Girls-Clothing (Sizes 4-16+) >
    * Dresses

Bidding has ended on this item.

info
This is a private listing. Sign in to view your status or learn more about private listings.
FREE shipping
Pageant Glamour Glitz Photo Dress Up Picture Retouching
Please wait
Image not available

    * Enlarge

	
Pageant Glamour Glitz Photo Dress Up Picture Retouching
Item condition:	--
Ended:	Sep 08, 201021:29:36 PDT
Bid history:	
0 bids
Starting bid:	US $9.99	
	
Add to list
Start of panel

    * Add to Watch list

Sign in for more lists
End of panel

Start of layer	
Add to a new list
Please enter a valid name
(Separate multiple list names with a comma.)
Cancel
Click To Close
	
End of layer

	
	
Shipping:	FREE shipping Standard Flat Rate Shipping Service
See more services 

Start of layer	
Country:
ZIP Code:
Service and other details:
Service
	
Estimated delivery*
	
Price
Standard Flat Rate Shipping Service
	
varies
	
Free
*The estimated delivery time is based on the seller's handling time, the shipping service selected, and the payment method selected. Sellers are not responsible for shipping service transit times. Transit times may vary, particularly during peak periods.
Click To Close
	
End of layer

	
 See shipping discounts 

Start of layer	
	
End of layer

	
 |  See all shipping details
Estimated delivery time varies.
Returns:	
No Returns Accepted
eBay will cover your purchase price plus original shipping.
Learn more about eBay Buyer Protection - opens in a new window or tab

Start of layer	
A reserve price is the minimum price the seller will accept. This price is hidden from bidders. To win, a bidder must have the highest bid and have met or exceeded the reserve price.
	
End of layer

	
	 	
Seller info
Member id naturalglitz ( Feedback Score Of 70Blue star icon for feedback score in between 50 to 99)

100% Positive feedback
Save this seller
See other items from this seller
Other item info
Item number:	270630672898
Item location:	South Eastern USA, United States
Ships to:	Worldwide
Payments:	
PayPal See payment details
Share this item

Start of layer	
Share this item
Email to a friend - opens in a new window or tab
Share on Facebook - opens in a new window or tab
Share on Twitter - opens in a new window or tab
Click To Close
	
End of layer

	
Print this item - opens in a new window or tabReport item
	 		
Description
	 		
Shipping and payments
Seller assumes all responsibility for this listing.
Last updated on 01:54:08 PM PDT, Sep 03, 2010 View all revisions
Questions and answers about this item
 	No questions or answers have been posted about this item.	 
Ask a question
Seller assumes all responsibility for this listing.
Shipping and handling
Item location: South Eastern USA, United States
Shipping to: Worldwide
Change country:
	
ZIP Code:
	
 
Shipping and handling
	
To
	
Service
	
Estimated delivery*
Free shipping
	
United States
	
Standard Flat Rate Shipping Service
	
Varies
Seller ships within 1 day after receiving cleared payment - opens in a new window or tab.
*The estimated delivery time - opens in a new window or tab is based on the seller's handling time, the shipping service selected, and when the seller receives cleared payment - opens in a new window or tab. Sellers are not responsible for shipping service transit times. Transit times may vary, particularly during peak periods.
Domestic handling time
Will usually ship within 1 business day of receiving cleared payment - opens in a new window or tab.
Return policy
The seller will not accept returns for this item.
Payment details
Payment method	Preferred / Accepted	 
Credit or debit card through PayPal
	
PayPal Preferred
	 
Seller's payment instructions
Please send photos to photos@naturalglitz.com with your request.
This is a private listing and your identity will not be disclosed to anyone except the seller.
Back to home page | Sell one like thisReturn to top
Domain Names | Domain | Domain Name | Llll | Address Labels | Popular Searches | eBay Reviews | eBay Stores | Half.com | Global Buying Hub | United Kingdom | Germany | Australia | Canada
Free Local Classifieds | PayPal | ProStores | Apartments for Rent | Shopping.com | Tickets

About eBay | Announcements | Buy Hub | Security Center | Resolution Center | Buyer Tools | Policies | Stores | Site Map | Help | eBay official time
eBay Buyer Protection	We'll cover your purchase price plus original shipping.  	Learn moreabout eBay buyer protection - Opens in new window or tab
Copyright © 1995-2010 eBay Inc. All Rights Reserved. Designated trademarks and brands are the property of their respective owners. Use of this Web site constitutes acceptance of the eBay User Agreement and Privacy Policy.

Class 	Object
In: 	object.c
lib/irb/ext/use-loader.rb
lib/pp.rb
lib/rexml/xpath_parser.rb
lib/soap/soap.rb

Object is the parent class of all classes in Ruby. Its methods are therefore available to all objects unless explicitly overridden.

Object mixes in the Kernel module, making the built-in kernel functions globally accessible. Although the instance methods of Object are defined by the Kernel module, we have chosen to document them here for clarity.

In the descriptions of Object‘s methods, the parameter symbol refers to a symbol, which is either a quoted string or a Symbol (such as :name).
Methods
==   ===   =~   __id__   __send__   class   clone   dclone   display   dup   enum_for   eql?   equal?   extend   freeze   frozen?   hash   id   inspect   instance_eval   instance_of?   instance_variable_defined?   instance_variable_get   instance_variable_get   instance_variable_set   instance_variable_set   instance_variables   is_a?   kind_of?   method   methods   new   nil?   object_id   private_methods   protected_methods   public_methods   remove_instance_variable   respond_to?   send   singleton_method_added   singleton_method_removed   singleton_method_undefined   singleton_methods   taint   tainted?   to_a   to_enum   to_s   type   untaint  
Included Modules
Kernel PP::ObjectMixin
Constants
TOPLEVEL_BINDING 	= 	rb_f_binding(ruby_top_self)
ENV 	= 	envtbl
ENV 	= 	envtbl
STDIN 	= 	rb_stdin 	  	constants to hold original stdin/stdout/stderr
STDOUT 	= 	rb_stdout
STDERR 	= 	rb_stderr
ARGF 	= 	argf
NIL 	= 	Qnil
TRUE 	= 	Qtrue
FALSE 	= 	Qfalse
MatchingData 	= 	rb_cMatch
DATA 	= 	f
ARGV 	= 	rb_argv
RUBY_VERSION 	= 	v
RUBY_RELEASE_DATE 	= 	d
RUBY_PLATFORM 	= 	p
RUBY_PATCHLEVEL 	= 	INT2FIX(RUBY_PATCHLEVEL)
VERSION 	= 	v 	  	obsolete constants
RELEASE_DATE 	= 	d
PLATFORM 	= 	p
IPsocket 	= 	rb_cIPSocket
TCPsocket 	= 	rb_cTCPSocket
SOCKSsocket 	= 	rb_cSOCKSSocket
TCPserver 	= 	rb_cTCPServer
UDPsocket 	= 	rb_cUDPSocket
UNIXsocket 	= 	rb_cUNIXSocket
UNIXserver 	= 	rb_cUNIXServer
External Aliases
load 	-> 	__original__load__IRB_use_loader__
require 	-> 	__original__require__IRB_use_loader__
Public Class methods
new()

Not documented
Public Instance methods
obj == other => true or false
obj.equal?(other) => true or false
obj.eql?(other) => true or false

Equality—At the Object level, == returns true only if obj and other are the same object. Typically, this method is overridden in descendent classes to provide class-specific meaning.

Unlike ==, the equal? method should never be overridden by subclasses: it is used to determine object identity (that is, a.equal?(b) iff a is the same object as b).

The eql? method returns true if obj and anObject have the same value. Used by Hash to test members for equality. For objects of class Object, eql? is synonymous with ==. Subclasses normally continue this tradition, but there are exceptions. Numeric types, for example, perform type conversion across ==, but not across eql?, so:

   1 == 1.0     #=> true
   1.eql? 1.0   #=> false

obj === other => true or false

Case Equality—For class Object, effectively the same as calling #==, but typically overridden by descendents to provide meaningful semantics in case statements.
obj =~ other => false

Pattern Match—Overridden by descendents (notably Regexp and String) to provide meaningful pattern-match semantics.
obj.__id__ => fixnum
obj.object_id => fixnum

Document-method: object_id

Returns an integer identifier for obj. The same number will be returned on all calls to id for a given object, and no two active objects will share an id. Object#object_id is a different concept from the :name notation, which returns the symbol id of name. Replaces the deprecated Object#id.
obj.send(symbol [, args...]) => obj
obj.__send__(symbol [, args...]) => obj

Invokes the method identified by symbol, passing it any arguments specified. You can use __send__ if the name send clashes with an existing method in obj.

   class Klass
     def hello(*args)
       "Hello " + args.join(' ')
     end
   end
   k = Klass.new
   k.send :hello, "gentle", "readers"   #=> "Hello gentle readers"

obj.class => class

Returns the class of obj, now preferred over Object#type, as an object‘s type in Ruby is only loosely tied to that object‘s class. This method must always be called with an explicit receiver, as class is also a reserved word in Ruby.

   1.class      #=> Fixnum
   self.class   #=> Object

obj.clone → an_object

Produces a shallow copy of obj—the instance variables of obj are copied, but not the objects they reference. Copies the frozen and tainted state of obj. See also the discussion under Object#dup.

   class Klass
      attr_accessor :str
   end
   s1 = Klass.new      #=> #<Klass:0x401b3a38>
   s1.str = "Hello"    #=> "Hello"
   s2 = s1.clone       #=> #<Klass:0x401b3998 @str="Hello">
   s2.str[1,4] = "i"   #=> "i"
   s1.inspect          #=> "#<Klass:0x401b3a38 @str=\"Hi\">"
   s2.inspect          #=> "#<Klass:0x401b3998 @str=\"Hi\">"

This method may have class-specific behavior. If so, that behavior will be documented under the #initialize_copy method of the class.
dclone()
obj.display(port=$>) => nil

Prints obj on the given port (default $>). Equivalent to:

   def display(port=$>)
     port.write self
   end

For example:

   1.display
   "cat".display
   [ 4, 5, 6 ].display
   puts

produces:

   1cat456

obj.dup → an_object

Produces a shallow copy of obj—the instance variables of obj are copied, but not the objects they reference. dup copies the tainted state of obj. See also the discussion under Object#clone. In general, clone and dup may have different semantics in descendent classes. While clone is used to duplicate an object, including its internal state, dup typically uses the class of the descendent object to create the new instance.

This method may have class-specific behavior. If so, that behavior will be documented under the #initialize_copy method of the class.
obj.to_enum(method = :each, *args)
obj.enum_for(method = :each, *args)

Returns Enumerable::Enumerator.new(self, method, *args).

e.g.:

   str = "xyz"

   enum = str.enum_for(:each_byte)
   a = enum.map {|b| '%02x' % b } #=> ["78", "79", "7a"]

   # protects an array from being modified
   a = [1, 2, 3]
   some_method(a.to_enum)

obj == other => true or false
obj.equal?(other) => true or false
obj.eql?(other) => true or false

Equality—At the Object level, == returns true only if obj and other are the same object. Typically, this method is overridden in descendent classes to provide class-specific meaning.

Unlike ==, the equal? method should never be overridden by subclasses: it is used to determine object identity (that is, a.equal?(b) iff a is the same object as b).

The eql? method returns true if obj and anObject have the same value. Used by Hash to test members for equality. For objects of class Object, eql? is synonymous with ==. Subclasses normally continue this tradition, but there are exceptions. Numeric types, for example, perform type conversion across ==, but not across eql?, so:

   1 == 1.0     #=> true
   1.eql? 1.0   #=> false

obj == other => true or false
obj.equal?(other) => true or false
obj.eql?(other) => true or false

Equality—At the Object level, == returns true only if obj and other are the same object. Typically, this method is overridden in descendent classes to provide class-specific meaning.

Unlike ==, the equal? method should never be overridden by subclasses: it is used to determine object identity (that is, a.equal?(b) iff a is the same object as b).

The eql? method returns true if obj and anObject have the same value. Used by Hash to test members for equality. For objects of class Object, eql? is synonymous with ==. Subclasses normally continue this tradition, but there are exceptions. Numeric types, for example, perform type conversion across ==, but not across eql?, so:

   1 == 1.0     #=> true
   1.eql? 1.0   #=> false

obj.extend(module, ...) => obj

Adds to obj the instance methods from each module given as a parameter.

   module Mod
     def hello
       "Hello from Mod.\n"
     end
   end

   class Klass
     def hello
       "Hello from Klass.\n"
     end
   end

   k = Klass.new
   k.hello         #=> "Hello from Klass.\n"
   k.extend(Mod)   #=> #<Klass:0x401b3bc8>
   k.hello         #=> "Hello from Mod.\n"

obj.freeze => obj

Prevents further modifications to obj. A TypeError will be raised if modification is attempted. There is no way to unfreeze a frozen object. See also Object#frozen?.

   a = [ "a", "b", "c" ]
   a.freeze
   a << "z"

produces:

   prog.rb:3:in `<<': can't modify frozen array (TypeError)
    from prog.rb:3

obj.frozen? => true or false

Returns the freeze status of obj.

   a = [ "a", "b", "c" ]
   a.freeze    #=> ["a", "b", "c"]
   a.frozen?   #=> true

obj.hash => fixnum

Generates a Fixnum hash value for this object. This function must have the property that a.eql?(b) implies a.hash == b.hash. The hash value is used by class Hash. Any hash value that exceeds the capacity of a Fixnum will be truncated before being used.
obj.id => fixnum

Soon-to-be deprecated version of Object#object_id.
obj.inspect => string

Returns a string containing a human-readable representation of obj. If not overridden, uses the to_s method to generate the string.

   [ 1, 2, 3..4, 'five' ].inspect   #=> "[1, 2, 3..4, \"five\"]"
   Time.new.inspect                 #=> "Wed Apr 09 08:54:39 CDT 2003"

obj.instance_eval(string [, filename [, lineno]] ) => obj
obj.instance_eval {| | block } => obj

Evaluates a string containing Ruby source code, or the given block, within the context of the receiver (obj). In order to set the context, the variable self is set to obj while the code is executing, giving the code access to obj‘s instance variables. In the version of instance_eval that takes a String, the optional second and third parameters supply a filename and starting line number that are used when reporting compilation errors.

   class Klass
     def initialize
       @secret = 99
     end
   end
   k = Klass.new
   k.instance_eval { @secret }   #=> 99

obj.instance_of?(class) => true or false

Returns true if obj is an instance of the given class. See also Object#kind_of?.
obj.instance_variable_defined?(symbol) => true or false

Returns true if the given instance variable is defined in obj.

   class Fred
     def initialize(p1, p2)
       @a, @b = p1, p2
     end
   end
   fred = Fred.new('cat', 99)
   fred.instance_variable_defined?(:@a)    #=> true
   fred.instance_variable_defined?("@b")   #=> true
   fred.instance_variable_defined?("@c")   #=> false

instance_variable_get(ivarname)
obj.instance_variable_get(symbol) => obj

Returns the value of the given instance variable, or nil if the instance variable is not set. The @ part of the variable name should be included for regular instance variables. Throws a NameError exception if the supplied symbol is not valid as an instance variable name.

   class Fred
     def initialize(p1, p2)
       @a, @b = p1, p2
     end
   end
   fred = Fred.new('cat', 99)
   fred.instance_variable_get(:@a)    #=> "cat"
   fred.instance_variable_get("@b")   #=> 99

obj.instance_variable_set(symbol, obj) => obj

Sets the instance variable names by symbol to object, thereby frustrating the efforts of the class‘s author to attempt to provide proper encapsulation. The variable did not have to exist prior to this call.

   class Fred
     def initialize(p1, p2)
       @a, @b = p1, p2
     end
   end
   fred = Fred.new('cat', 99)
   fred.instance_variable_set(:@a, 'dog')   #=> "dog"
   fred.instance_variable_set(:@c, 'cat')   #=> "cat"
   fred.inspect                             #=> "#<Fred:0x401b3da8 @a=\"dog\", @b=99, @c=\"cat\">"

instance_variable_set(ivarname, value)
obj.instance_variables => array

Returns an array of instance variable names for the receiver. Note that simply defining an accessor does not create the corresponding instance variable.

   class Fred
     attr_accessor :a1
     def initialize
       @iv = 3
     end
   end
   Fred.new.instance_variables   #=> ["@iv"]

obj.is_a?(class) => true or false
obj.kind_of?(class) => true or false

Returns true if class is the class of obj, or if class is one of the superclasses of obj or modules included in obj.

   module M;    end
   class A
     include M
   end
   class B < A; end
   class C < B; end
   b = B.new
   b.instance_of? A   #=> false
   b.instance_of? B   #=> true
   b.instance_of? C   #=> false
   b.instance_of? M   #=> false
   b.kind_of? A       #=> true
   b.kind_of? B       #=> true
   b.kind_of? C       #=> false
   b.kind_of? M       #=> true

obj.is_a?(class) => true or false
obj.kind_of?(class) => true or false

Returns true if class is the class of obj, or if class is one of the superclasses of obj or modules included in obj.

   module M;    end
   class A
     include M
   end
   class B < A; end
   class C < B; end
   b = B.new
   b.instance_of? A   #=> false
   b.instance_of? B   #=> true
   b.instance_of? C   #=> false
   b.instance_of? M   #=> false
   b.kind_of? A       #=> true
   b.kind_of? B       #=> true
   b.kind_of? C       #=> false
   b.kind_of? M       #=> true

obj.method(sym) => method

Looks up the named method as a receiver in obj, returning a Method object (or raising NameError). The Method object acts as a closure in obj‘s object instance, so instance variables and the value of self remain available.

   class Demo
     def initialize(n)
       @iv = n
     end
     def hello()
       "Hello, @iv = #{@iv}"
     end
   end

   k = Demo.new(99)
   m = k.method(:hello)
   m.call   #=> "Hello, @iv = 99"

   l = Demo.new('Fred')
   m = l.method("hello")
   m.call   #=> "Hello, @iv = Fred"

obj.methods => array

Returns a list of the names of methods publicly accessible in obj. This will include all the methods accessible in obj‘s ancestors.

   class Klass
     def kMethod()
     end
   end
   k = Klass.new
   k.methods[0..9]    #=> ["kMethod", "freeze", "nil?", "is_a?",
                           "class", "instance_variable_set",
                            "methods", "extend", "__send__", "instance_eval"]
   k.methods.length   #=> 42

nil?()

call_seq:

  nil.nil?               => true
  <anything_else>.nil?   => false

Only the object nil responds true to nil?.
obj.__id__ => fixnum
obj.object_id => fixnum

Returns an integer identifier for obj. The same number will be returned on all calls to id for a given object, and no two active objects will share an id. Object#object_id is a different concept from the :name notation, which returns the symbol id of name. Replaces the deprecated Object#id.
obj.private_methods(all=true) => array

Returns the list of private methods accessible to obj. If the all parameter is set to false, only those methods in the receiver will be listed.
obj.protected_methods(all=true) => array

Returns the list of protected methods accessible to obj. If the all parameter is set to false, only those methods in the receiver will be listed.
obj.public_methods(all=true) => array

Returns the list of public methods accessible to obj. If the all parameter is set to false, only those methods in the receiver will be listed.
obj.remove_instance_variable(symbol) => obj

Removes the named instance variable from obj, returning that variable‘s value.

   class Dummy
     attr_reader :var
     def initialize
       @var = 99
     end
     def remove
       remove_instance_variable(:@var)
     end
   end
   d = Dummy.new
   d.var      #=> 99
   d.remove   #=> 99
   d.var      #=> nil

obj.respond_to?(symbol, include_private=false) => true or false

Returns true> if obj responds to the given method. Private methods are included in the search only if the optional second parameter evaluates to true.
obj.send(symbol [, args...]) => obj
obj.__send__(symbol [, args...]) => obj

Invokes the method identified by symbol, passing it any arguments specified. You can use __send__ if the name send clashes with an existing method in obj.

   class Klass
     def hello(*args)
       "Hello " + args.join(' ')
     end
   end
   k = Klass.new
   k.send :hello, "gentle", "readers"   #=> "Hello gentle readers"

singleton_method_added(symbol)

Invoked as a callback whenever a singleton method is added to the receiver.

   module Chatty
     def Chatty.singleton_method_added(id)
       puts "Adding #{id.id2name}"
     end
     def self.one()     end
     def two()          end
     def Chatty.three() end
   end

produces:

   Adding singleton_method_added
   Adding one
   Adding three

singleton_method_removed(symbol)

Invoked as a callback whenever a singleton method is removed from the receiver.

   module Chatty
     def Chatty.singleton_method_removed(id)
       puts "Removing #{id.id2name}"
     end
     def self.one()     end
     def two()          end
     def Chatty.three() end
     class <<self
       remove_method :three
       remove_method :one
     end
   end

produces:

   Removing three
   Removing one

singleton_method_undefined(symbol)

Invoked as a callback whenever a singleton method is undefined in the receiver.

   module Chatty
     def Chatty.singleton_method_undefined(id)
       puts "Undefining #{id.id2name}"
     end
     def Chatty.one()   end
     class << self
        undef_method(:one)
     end
   end

produces:

Undefining one

obj.singleton_methods(all=true) => array

Returns an array of the names of singleton methods for obj. If the optional all parameter is true, the list will include methods in modules included in obj.

   module Other
     def three() end
   end

   class Single
     def Single.four() end
   end

   a = Single.new

   def a.one()
   end

   class << a
     include Other
     def two()
     end
   end

   Single.singleton_methods    #=> ["four"]
   a.singleton_methods(false)  #=> ["two", "one"]
   a.singleton_methods         #=> ["two", "one", "three"]

obj.taint → obj

Marks obj as tainted—if the $SAFE level is set appropriately, many method calls which might alter the running programs environment will refuse to accept tainted strings.
obj.tainted? => true or false

Returns true if the object is tainted.
obj.to_a → anArray

Returns an array representation of obj. For objects of class Object and others that don‘t explicitly override the method, the return value is an array containing self. However, this latter behavior will soon be obsolete.

   self.to_a       #=> -:1: warning: default `to_a' will be obsolete
   "hello".to_a    #=> ["hello"]
   Time.new.to_a   #=> [39, 54, 8, 9, 4, 2003, 3, 99, true, "CDT"]

obj.to_enum(method = :each, *args)
obj.enum_for(method = :each, *args)

Returns Enumerable::Enumerator.new(self, method, *args).

e.g.:

   str = "xyz"

   enum = str.enum_for(:each_byte)
   a = enum.map {|b| '%02x' % b } #=> ["78", "79", "7a"]

   # protects an array from being modified
   a = [1, 2, 3]
   some_method(a.to_enum)

obj.to_s => string

Returns a string representing obj. The default to_s prints the object‘s class and an encoding of the object id. As a special case, the top-level object that is the initial execution context of Ruby programs returns ``main.’‘
obj.type => class

Deprecated synonym for Object#class.
obj.untaint => obj

Removes the taint from obj.

[Validate]

ruby-doc.org is a service of James Britt and Neurogami, a Ruby application development company in Phoenix, AZ.

Documentation content on ruby-doc.org is provided by remarkable members of the Ruby community.

For more information on the Ruby programming language, visit ruby-lang.org.

Want to help improve Ruby's API docs? See Ruby Documentation Guidelines.

Emoticons
Range: 1F600–1F64F The Unicode Standard, Version 6.0
This file contains an excerpt from the character code tables and list of character names for
The Unicode Standard, Version 6.0.
Characters in this chart that are new for The Unicode Standard, Version 6.0 are shown in conjunction with any existing characters. For ease of reference, the new characters have been highlighted in the chart grid and in the names list.
This file will not be updated with errata, or when additional characters are assigned to the Unicode Standard.
See http://www.unicode.org/errata/ for an up-to-date list of errata.
See http://www.unicode.org/charts/ for access to a complete list of the latest character code charts. See http://www.unicode.org/charts/PDF/Unicode-6.0/ for charts showing only the characters added in Unicode 6.0. See http://www.unicode.org/Public/6.0.0/charts/ for a complete archived file of character code charts for Unicode 6.0.
Disclaimer
These charts are provided as the online reference to the character contents of the Unicode Standard, Version 6.0 but do not provide all the information needed to fully support individual scripts using the Unicode Standard. For a complete understanding of the use of the characters contained in this file, please consult the appropriate sections of The Unicode Standard, Version 6.0, online at http://www.unicode.org/versions/Unicode6.0.0/, as well as Unicode Standard Annexes #9, #11, #14, #15, #24, #29, #31, #34, #38, #41, #42, and #44, the other Unicode Technical Reports and Standards, and the Unicode Character Database, which are available online.
See http://www.unicode.org/ucd/ and http://www.unicode.org/reports/
A thorough understanding of the information contained in these additional sources is required for a successful implementation.
Fonts
The shapes of the reference glyphs used in these code charts are not prescriptive. Considerable variation is to be expected in actual fonts. The particular fonts used in these charts were provided to the Unicode Consortium by a number of different font designers, who own the rights to the fonts.
See http://www.unicode.org/charts/fonts.html for a list.
Terms of Use
You may freely use these code charts for personal or internal business uses only. You may not incorporate them either wholly or in part into any product or publication, or otherwise distribute them without express written permission from the Unicode Consortium. However, you may provide links to these charts.
The fonts and font data used in production of these code charts may NOT be extracted, or used in any other way in any product or publication, without permission or license granted by the typeface owner(s).
The Unicode Consortium is not liable for errors or omissions in this file or the standard itself. Information on characters added to the Unicode Standard since the publication of the most recent version of the Unicode Standard, as well as on characters currently being considered for addition to the Unicode Standard can be found on the Unicode web site.
See http://www.unicode.org/pending/pending.html and http://www.unicode.org/alloc/Pipeline.html. Copyright © 1991-2010 Unicode, Inc. All rights reserved.
Emoticons
The Unicode Standard 6.0, Copyright © 1991-2010 Unicode, Inc. All rights reserved.
The emoticons have been organized by mouth shape to make it easier to locate the different characters in the code chart.
 used for the South Wind in some Mahjong annotation
white circle with two dots	FACE WITH MEDICAL MASK
Faces
GRINNING FACE WITH SMILING EYES FACE WITH TEARS OF JOY SMILING FACE WITH OPEN MOUTH white smiling face SMILING FACE WITH OPEN MOUTH AND SMILING EYES
SMILING FACE WITH OPEN MOUTH AND COLD SWEAT SMILING FACE WITH OPEN MOUTH AND TIGHTLY-CLOSED EYES
SMILING FACE WITH HALO SMILING FACE WITH HORNS WINKING FACE SMILING FACE WITH SMILING EYES FACE SAVOURING DELICIOUS FOOD RELIEVED FACE
SMILING FACE WITH HEART-SHAPED EYES SMILING FACE WITH SUNGLASSES SMIRKING FACE NEUTRAL FACE
 used for the West Wind in some Mahjong annotation
<reserved> UNAMUSED FACE FACE WITH COLD SWEAT PENSIVE FACE <reserved> CONFOUNDED FACE <reserved> FACE THROWING A KISS <reserved> KISSING FACE WITH CLOSED EYES <reserved> FACE WITH STUCK-OUT TONGUE AND WINKING EYE • kidding, not serious FACE WITH STUCK-OUT TONGUE AND TIGHTLY-CLOSED EYES kidding, not serious DISAPPOINTED FACE white frowning face <reserved> ANGRY FACE POUTING FACE CRYING FACE PERSEVERING FACE FACE WITH LOOK OF TRIUMPH DISAPPOINTED BUT RELIEVED FACE <reserved> <reserved> FEARFUL FACE WEARY FACE SLEEPY FACE TIRED FACE <reserved> LOUDLY CRYING FACE <reserved> <reserved> FACE WITH OPEN MOUTH AND COLD SWEAT
Cat faces
GRINNING CAT FACE WITH SMILING EYES CAT FACE WITH TEARS OF JOY SMILING CAT FACE WITH OPEN MOUTH SMILING CAT FACE WITH HEART-SHAPED EYES CAT FACE WITH WRY SMILE
KISSING CAT FACE WITH CLOSED EYES POUTING CAT FACE CRYING CAT FACE WEARY CAT FACE
Gesture symbols
FACE WITH NO GOOD GESTURE FACE WITH OK GESTURE PERSON BOWING DEEPLY SEE-NO-EVIL MONKEY HEAR-NO-EVIL MONKEY SPEAK-NO-EVIL MONKEY HAPPY PERSON RAISING ONE HAND PERSON RAISING BOTH HANDS IN CELEBRATION
banzai!
PERSON FROWNING PERSON WITH POUTING FACE PERSON WITH FOLDED HANDS • can indicate sorrow or regret • can indicate pleading
The Unicode Standard 6.0, Copyright © 1991-2010 Unicode, Inc. All rights reserved.