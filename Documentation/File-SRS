Actors:
+ Basic FS User
    - Wants basic IO functionality mirroring the stdio functionality.
    - Wants a well documented API and consistent.

+ Game Developer (extends Basic FS User)
    - Wants transparent access to compressed package files.
    - Wants transparent access to uncompressed package files.
    - Wants an easy way to manage a large number of resource locations.
    - Wants everything to be thread safe.



Non-functional requirements:
+ All operations should be thread safe ASSUMING that all threads are using this library to
  access the filesystem. For example, if one thread uses this API to open a file, another
  thread also making use of this API may not delete the file while the other file is
  trying to open it. However, if the file is deleted by an outside source there may be
  problems. (Game Developer)

+ All accessible functions shall be well documented. To aid users in their use of this
  API, all externalized functionality will be accompanied by documentation. (Basic FS
  User).



Definitions:
+ CWD - Current Working Directory
+ Resource Location - A resouce location may be a directory, a package file, or a
    compressed package file.



Known Issues / Caveats:
+ Functions will be, internally, thread safe. However, the current directory may be
  changed by one thread while another is between library calls. Ex:

  setCurrentWorkingDirectory("/somewhere");
  openWriteFile("file.txt");

  It is possible for another thread to set the current working directory between the two
  function calls, causeing the initial thread to open a write file in an unexpected place.
  Currently there is no way to have multiple current working directories.

+ It is possible for threads and processes to make changes to the file system while the
  library is trying to do things (AKA this library can't tell your OS not to touch the
  FS).



Use Case Outline:
+ Read from file
    Open a file
    An entire string
    A single data element (int, Real, double, etc...)
    A buffer of X bytes
    A single line
    A single byte
    Close a file
+ Write to file
    Open a file
    An entire string
    A single data element (int, Real, double, etc...)
    A buffer of X bytes
    A single line
    A single byte
    Close a file
+ Add a resource location
    directory
    compressed package
    uncompressed package
+ Set the current working directory
+ Get directory listing
+ Delete a file



Use Cases:
+ ID: 1
  Name: Read from file
  Created: July 30th, 2007
  Updated: July 30th, 2007
  Actors: Basic FS User, Game Developer
  Description: The user opens a file. The library will first look for the file relative to
    the current working directory, then it will look for it in each of the resource
    direcories. The first instance of a matching file will be opened. If nothing is found or
    if it cannot be opened (it is already opened for writing, or the user does not have the
    correct permissions), an error will be returned. The user then reads some data. Data may
    be read as a single data element (int, Real, double, etc...), a buffer of X bytes, an
    entire string, a single line, or a single byte. Finally, the user closes the file.
  Exception: User does not have proper permissions.
             File is already open for Writing.
  Priority: High
  Difficulty: 3
  Status: 

+ ID: 2
  Name: Write to file
  Created: July 30th, 2007
  Updated: July 30th, 2007
  Actors: Basic FS User, Game Developer
  Description: The user opens a file. If an absolute path is given, that file is opened,
    otherwise, a file in the current working directory is opened. If the user cannot open a
    file to write to (it is already opened or the user doesn't have permission), an error is
    returned. The user then writes some data. Data may be written as a single data element
    (int, Real, double, etc...), a buffer of X bytes, an entire string, a single line, or a
    single byte. Finally, the user closes the file. A file may be written over or
    appended.
  Exceptions: User does not have proper permissions.
              File is already open.
  Priority: High
  Difficulty: 3
  Status: 

+ ID: 3
  Name: Set the current working directory
  Created: July 30th, 2007
  Updated: July 30th, 2007
  Actors: Basic FS User, Game Developer
  Description: The user sets the current directory. All following files opened will take the
    current directory into account.
  Priority: Medium
  Difficulty: 1
  Issues: Thread safety could become a problem...
  Status: 

+ ID: 4
  Name: Adjust resource locations.
  Created: July 30th, 2007
  Updated: July 30th, 2007
  Actors: Game Developer
  Description: The user adds a new resource location. All following files opened for reading
    will look in the added resource directory. The order of the search is NOT guaranteed.
    The user removes a resource location. All following files opened will no longer
    consider the removed resource directory.
  Priority: Medium
  Difficulty: 8
  Issues: Should I specify an order of the search?
          Is it possible for the number of resources to become so large this method is not
            feasible?
  Status: 

+ ID: 5
  Name: Get a directory listing
  Created: July 30th, 2007
  Updated: July 30th, 2007
  Actors: Game Developer
  Description: The user requests a directory listing from either the current working
    directory, a directory relative to the current working directory, or an absolute path.
    The user is given a list of unopened files.
  Exceptions: The user does not have proper permissions.
  Priority: Medium
  Difficulty: 5
  Issues: Should there be a sort order on the returned list?
  Status: 

+ ID: 6
  Name: Delete a file
  Created: July 30th, 2007
  Updated: July 30th, 2007
  Actors: Game Developer
  Description: The user deletes a file and it is removed from the filesystem.
  Exceptions: The file is open.
              The user does not have proper permissions.
  Priority: Low
  Difficulty: 1
  Status: 
